@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject BootstrapBlazor.Components.ToastService ToastService

<div class="product-card">
    <img src=@Product.FullImageLink class="product-card-image" />
    <span class="product-card-price">@GetPrice()</span>
    <NavLink href=@GetHref() class="product-card-price">@Product.Naim2</NavLink>
    @if (IsAvailable)
    {
        <BootstrapBlazor.Components.Button IsAsync="true" OnClick="@AddToCart" class="product-cart-btn">В корзину</BootstrapBlazor.Components.Button>
    }
    else
    {
        <BootstrapBlazor.Components.Button IsDisabled="true" class="product-cart-btn">Под заказ</BootstrapBlazor.Components.Button>
    }
</div>
@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter(Name = "Token")]
    public string Token { get; set; }

    [CascadingParameter(Name = "IsAuthorized")]
    public bool IsAuthorized { get; set; }

    public Product Product { get; set; } = new Product();
    public bool IsAvailable { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        int stock = await Product.GetProductStock(Id);
        IsAvailable = stock > 0;
        Product = (await BaseHttpServices<Product>.SendListAsync<Product>("Tovary/" + Id, HttpMethod.Get)).FirstOrDefault();
    }

    private string GetPrice()
    {
        if (Product != null && Product.Prices != null && Product.Prices.FirstOrDefault() != null)
        {
            return Product.Prices?.FirstOrDefault()?.price_nal + " руб/лист";
        }
        IsAvailable = false;
        return "уточняйте у менеджера";
    }

    private string GetHref()
    {
        return "product/" + Product.ID;
    }


    private async Task AddToCart()
    {
        ShoppingCart? shoppingCart;
        if (IsAuthorized)
        {
            shoppingCart = await ShopingCartService.GetCart();
        }
        else
        {
            shoppingCart = await localStorage.GetItemAsync<ShoppingCart>("ShoppingCart");
        }

        if (shoppingCart == null) shoppingCart = new ShoppingCart();

        if (shoppingCart.ProductCarts == null) shoppingCart.ProductCarts = new List<ProductCart>();
        ProductCart? productCart = shoppingCart.ProductCarts.Where(p => p.Product.ID == Id).FirstOrDefault();
        if (productCart == null) shoppingCart.ProductCarts.Add(new ProductCart() { Count = 1, Product = Product, ProductId = Id });
        else productCart.Count += 1;

        if (IsAuthorized)
        {
            string res = await ShopingCartService.SetCart(shoppingCart, Token);
            if (res != "") OnInfoClick(res);
        }
        else await localStorage.SetItemAsync("ShoppingCart", shoppingCart);

        OnInfoClick("Товар добавлен в корзину");
    }

    private void OnInfoClick(string title, string content = "")
    {
        ToastService.Show(new BootstrapBlazor.Components.ToastOption()
            {
                // Notification category
                Category = BootstrapBlazor.Components.ToastCategory.Success,

                // Notification box Title value
                Title = title,

                // Notification body content
                Content = content
            });
    }
}
