@page "/auth"
@using System.Web;
@using Microsoft.AspNetCore.Http
@using OnlineShop.Models
@inject IHttpContextAccessor httpContextAccessor
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using BootstrapBlazor.Components

<PageTitle>Авторизация</PageTitle>
<AuthorizeView>
    <Authorized>
        <PageTitle>Профиль</PageTitle>
        <div class="d-flex flex-row account">
            <div class="d-flex flex-column account-data">
                <h2>Личные данные</h2>
                <BootstrapInput @bind-Value="@CurrentUser.Name" PlaceHolder="Имя" IsTrim="true" ShowLabel="true" DisplayText="Имя" />
                <BootstrapInput @bind-Value="@CurrentUser.Email" PlaceHolder="Email" IsTrim="true" ShowLabel="true" DisplayText="Email" />
                <BootstrapInput @bind-Value="@CurrentUser.Phone" PlaceHolder="Телефон" IsTrim="true" ShowLabel="true" DisplayText="Телефон" />
                <a class="ml-md-auto btn btn-primary"
                   href="/logout?returnUrl=/"
                   target="_top">Выйти</a>
            </div>
            <div class="d-flex flex-column">
                <h2>Мои покупки</h2>

            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <div class="d-flex flex-column center-div">

            <h1>Авторизация</h1>
            <Input Placeholder="Почта" Type="email" @bind-Value="@Email" />
            <Input Placeholder="Пароль" Type="text" @bind-Value="@Password" />
            <a href="/login?paramUsername=@encode(@Email)&paramPassword=@encode(@Password)">Войти</a>
            <NavLink href="/sign-up">Регистрация</NavLink>
        </div>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    public Auth()
    {
        CurrentUser = new User();
    }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                if (user.Identity is not null && user.Identity.IsAuthenticated)
                {
                    CurrentUser = new User() { Name = user.Identity.Name };
                }
            }
        }
        if(await localStorage.ContainKeyAsync("CurrentUser"))
        {
            CurrentUser = await localStorage.GetItemAsync<User>("CurrentUser");
        }
    }
    public string Email { get; set; }
    public string Password { get; set; }
    public User CurrentUser { get; set; }
    private string encode(string param)
    {
        return HttpUtility.UrlEncode(param);
    }
    private async Task AuthBtnClick()
    {
        await localStorage.SetItemAsync("UserEmail", Email);
        //HttpContext.Response.Cookies.Append("UserEmail", Email);
    }
}
