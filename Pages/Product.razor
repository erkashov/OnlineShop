@page "/product/{Id:int}"
@using OnlineShop.Shared
@using BootstrapBlazor.Components
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject BootstrapBlazor.Components.SwalService SswalService
@inject BootstrapBlazor.Components.ToastService ToastService
<PageTitle>Купить @ProductItem.Naim2 в Казани</PageTitle>
<div class="d-flex flex-column">
    <h1 class="product-page-header">@ProductItem.Naim2</h1>
    <div class="adaptive-container product-page-123">
        <img src=@ProductItem.FullImageLink class="product-page-image" />
        <div class="d-flex flex-column">
            @if (ThicknessList.Count > 1)
            {
                <p>Толщина</p>
                <div class="d-flex flex-row product-page-options">
                    <RadioList TValue="double" IsButton="true" Items="@TolItems" Value="@ProductItem.tol"
                           Color="BootstrapBlazor.Components.Color.Success" OnSelectedChanged="@OnSelectedChanged"></RadioList>
                </div>

            }
            @if (SortsList.Count > 1)
            {
                <p>Сорт</p>
                <div class="d-flex flex-row product-page-options">
                    <RadioList TValue="string" IsButton="true" Items="@SortItems" Value="@ProductItem.sort"
                           Color="BootstrapBlazor.Components.Color.Success" OnSelectedChanged="@OnSelectedChangedSort"></RadioList>
                </div>
            }
        </div>
        <div class="d-flex flex-column cart-itog">
            <span class="product-page-header">@GetPrice()</span>
            <div class="d-flex flex-row gap-20">
                <BootstrapInputNumber @bind-Value="@ProductCount" Min="1" Style="width:100px" />
                <div class="d-flex flex-row">
                    @if (IsAvailable)
                    {
                        <BootstrapBlazor.Components.Button IsAsync="true" OnClick="@AddToCart" class="product-cart-btn">В корзину</BootstrapBlazor.Components.Button>
                    }
                    else
                    {
                        <BootstrapBlazor.Components.Button IsDisabled="true" class="product-cart-btn">Под заказ</BootstrapBlazor.Components.Button>
                    }
                </div>
            </div>
        </div>
    </div>

    <table class="table">
        <tbody>
            <tr>
                <th scope="row">Размеры</th>
                <td>@ProductItem.dlina*@ProductItem.shir</td>
            </tr>
            <tr>
                <th scope="row">Сорт</th>
                <td>@ProductItem.nazn @ProductItem.sort</td>
            </tr>
            <tr>
                <th scope="row">Толщина</th>
                <td>@ProductItem.tol мм</td>
            </tr>
        </tbody>
    </table>
    <div><p>@((MarkupString)ProductItem.NormalizedDescription)</p></div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter(Name = "Token")]
    public string Token { get; set; }

    [CascadingParameter(Name = "IsAuthorized")]
    public bool IsAuthorized { get; set; }

    public bool IsAvailable { get; set; } = false;
    public int ProductCount { get; set; } = 1;

    public ShopLib.Product ProductItem { get; set; } = new ShopLib.Product();
    private List<ShopLib.Product>? Products { get; set; } = new List<ShopLib.Product>();
    private List<double>? ThicknessList { get; set; } = new List<double>();
    private List<string>? SortsList { get; set; } = new List<string>();
    private double SelectedThickness { get; set; }
    private string SelectedSort { get; set; }

    private List<SelectedItem>? SortItems { get; set; } = new List<SelectedItem>();
    private List<SelectedItem>? TolItems { get; set; } = new List<SelectedItem>();

    protected override async Task OnParametersSetAsync()
    {
        int stock = await ShopLib.Product.GetProductStock(Id);
        IsAvailable = stock > 0;

        ProductItem = (await BaseHttpServices<ShopLib.Product>.SendListAsync<ShopLib.Product>("Tovary/" + Id, HttpMethod.Get)).FirstOrDefault();
        await GetProducts();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) GetProducts();
    }

    private string GetPrice()
    {
        if (ProductItem.Prices != null && ProductItem.Prices.FirstOrDefault() != null)
        {
            return ProductItem.Prices?.FirstOrDefault()?.price_nal + " руб/лист";
        }
        IsAvailable = false;
        return "уточните у менеджера";
    }

    private async Task GetProducts()
    {
        CategoryFilter filter = new CategoryFilter();
        filter.CategoryId = ProductItem.categoryID;
        filter.ProductsSorts.Add(ProductItem.sort);
        filter.Search = "";
        Products = await BaseHttpServices<ShopLib.Product>.SendListAsync<ShopLib.Product>("Tovary/Filter", HttpMethod.Post, filter);
        ThicknessList = Products.Select(p => p.tol).Distinct().ToList();
        SortsList = Products.Select(p => p.sort).Distinct().ToList();
        SortItems = new List<SelectedItem>();
        TolItems = new List<SelectedItem>();
        if (SortsList != null)
        {
            foreach (var item in SortsList)
            {
                SortItems.Add(new SelectedItem { Text = item, Value = item });
            }
        }
        if (ThicknessList != null)
        {
            foreach (var item in ThicknessList)
            {
                TolItems.Add(new SelectedItem { Text = item.ToString() + " мм", Value = item.ToString() });
            }
        }
    }

    private async Task AddToCart()
    {
        if (ProductCount > 0)
        {
            int stock = await ShopLib.Product.GetProductStock(Id);
            if (stock >= ProductCount)
            {
                ShoppingCart? shoppingCart;
                if (IsAuthorized)
                {
                    shoppingCart = await ShopingCartService.GetCart();
                }
                else
                {
                    shoppingCart = await localStorage.GetItemAsync<ShoppingCart>("ShoppingCart");
                }

                if (shoppingCart == null) shoppingCart = new ShoppingCart();

                if (shoppingCart.ProductCarts == null) shoppingCart.ProductCarts = new List<ProductCart>();
                ProductCart? productCart = shoppingCart.ProductCarts.Where(p => p.Product.ID == Id).FirstOrDefault();
                if (productCart == null) shoppingCart.ProductCarts.Add(new ProductCart() { Count = ProductCount, Product = ProductItem, ProductId = Id });
                else productCart.Count += ProductCount;

                if (IsAuthorized)
                {
                    string res = await ShopingCartService.SetCart(shoppingCart, Token);
                    if (res != "") OnInfoClick(res);
                }
                else await localStorage.SetItemAsync("ShoppingCart", shoppingCart);
            }
            else
            {
                var op = new BootstrapBlazor.Components.SwalOption()
                    {
                        Category = BootstrapBlazor.Components.SwalCategory.Error,
                        Title = "Такого кол-ва нет в наличии",
                        Content = "Максимум - " + stock,
                        ShowClose = true,
                        CloseButtonText = "Закрыть"
                    };

                await SswalService?.Show(op);
                ProductCount = stock;
            }
        }
    }

    private async Task<Task> OnSelectedChanged(IEnumerable<SelectedItem> items, double value)
    {
        await SetProduct(value, ProductItem.sort);
        return Task.CompletedTask;
    }

    private async Task<Task> OnSelectedChangedSort(IEnumerable<SelectedItem> items, string value)
    {
        await SetProduct(ProductItem.tol, value);
        return Task.CompletedTask;
    }

    private async Task SetProduct(double thickness, string sort)
    {
        var prod = Products?.Where(p => p.tol == thickness && p.sort == sort).FirstOrDefault();
        if (prod == null)
        {
            prod = Products?.Where(p => p.sort == sort).FirstOrDefault();
            if (prod == null)
            {
                prod = Products?.FirstOrDefault();
            }
        }

        if (prod != null)
        {
            NavigationManager.NavigateTo(prod.Link);
        }
    }

    private void OnInfoClick(string ex)
    {
        ToastService.Show(new BootstrapBlazor.Components.ToastOption()
            {
                // Notification category
                Category = BootstrapBlazor.Components.ToastCategory.Error,

                // Notification box Title value
                Title = "Ошибка",

                // Notification body content
                Content = ex
            });
    }
}