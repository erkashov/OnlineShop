@page "/cart"

@using OnlineShop.Shared
@using OnlineShop.Data
@using System.Text.Json;

@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Корзина</PageTitle>

<h1>
    Корзина
</h1>

<div class="d-flex flex-row">
    <div class="d-flex flex-column">
        <Table DataSource="ProductCarts" RowClassName="@(_=>"editable-row")" Bordered PaginationPosition="None">
            <PropertyColumn Property="c=>c.ImagePath" Title="">
                <Image Src="../src/fanera-fk.jpg" class="product-cart-image"></Image>
            </PropertyColumn>
            <PropertyColumn Property="c=>c.Product.Naim2" Title="Товар" Width="200px">
                <NavLink href=@context.Product.Link>@context.Product.Naim2</NavLink>
            </PropertyColumn>
            <PropertyColumn Width="30%" Property="c=>c.Count" Title="Кол-во" Style="width:150px">
                @if (editId == context.Id)
                {
                    <Input Type="number" @bind-Value="context.Count" OnBlur="stopEdit" AutoFocus Min="1" Style="width:100px" />
                }
                else
                {
                    <div class="editable-cell-value-wrap" style="padding-right:24px" @onclick="()=>StartEdit(context.Id)">
                        @context.Count
                    </div>
                }
            </PropertyColumn>
            <ActionColumn Title="">
                <Popconfirm Title="Удалить?"
                            OnConfirm="()=> DeleteRow(context.Id)"
                            OkText="Yes"
                            CancelText="No">
                    <a href="/cart">
                        <Icon Type="close" Theme="outline" class="icons" />
                    </a>
                </Popconfirm>
            </ActionColumn>
        </Table>
    </div>
    <div class="d-flex flex-column cart-itog">
        <h2>Итого</h2>
    </div>
</div>

<style>
    .editable-cell {
        position: relative;
    }

    .editable-cell-value-wrap {
        padding: 5px 12px;
        cursor: pointer;
    }

    .editable-row:hover .editable-cell-value-wrap {
        padding: 4px 11px;
        border: 1px solid #d9d9d9;
        border-radius: 4px;
    }

    [data-theme='dark'] .editable-row:hover .editable-cell-value-wrap {
        border: 1px solid #434343;
    }
</style>

@code {
    int i = 0;
    int? editId;

    List<ProductCart> ProductCarts { get; set; } = new List<ProductCart>();

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    protected override async Task OnInitializedAsync()
    {
        ProductCarts = await localStorage.GetItemAsync<List<ProductCart>>("UserCart");
    }

    private async Task DeleteRow(int id)
    {
        ProductCarts = ProductCarts.Where(d => d.Id != id).ToList();
        await SetCart();
    }

    private async Task StartEdit(int id)
    {
        editId = id;
    }

    void stopEdit()
    {
        var editedData = ProductCarts.FirstOrDefault(x => x.Id == editId);
        editId = null;
        SetCart();
    }

    protected override void OnInitialized()
    {
    }

    private async Task SetCart()
    {
        await localStorage.SetItemAsync("UserCart", ProductCarts);
    }
}
