@page "/catalog/{categoryName?}"

@using OnlineShop.Shared
@using OnlineShop.Data
@using BootstrapBlazor.Components

<PageTitle>Каталог </PageTitle>

<h1>
    Каталог
</h1>

<div class="d-flex flex-row">
    <div class="d-flex flex-column filter-container">

        @foreach (ProductCategory category in Categories)
        {
            string href = "/catalog/" + category.Path;
            if (category.Path == CategoryName)
            {
                <NavLink href=@href class="catalog-selected-category catalog-category">@category.Name</NavLink>
            }
            else
            {
                <NavLink href=@href class="catalog-category">@category.Name</NavLink>
            }
        }

        @if (CategoryName != null)
        {
            <h3>Фильтр</h3>
            <CheckboxList TValue="string" @bind-Value="@Value1" Items="@SortItems" ShowLabel="true" DisplayText="Сорт" ShowBorder='false' IsVertical='true' OnSelectedChanged="@OnSelectedChanged" />
            <CheckboxList TValue="string" @bind-Value="@Value2" Items="@TolItems" ShowLabel="true" DisplayText="Толщина" ShowBorder='false' IsVertical='true' OnSelectedChanged="@OnSelectedChanged" />
        }
    </div>
    <div class="d-flex flex-column">
        <ListView TItem="Product" Pageable="true" PageItems="21" OnQueryAsync="@OnQueryAsync">
            <BodyTemplate>
                <ProductCardComponent Id="1"></ProductCardComponent>
            </BodyTemplate>
        </ListView>
    </div>
</div>



@code {
    [Parameter]
    public string? CategoryName { get; set; }

    public List<string> Sorts = new List<string>() { "1/1", "2/2", "4/4" };
    public List<int> Tolshiny = new List<int>() { 9, 10, 12, 15, 18 };
    public List<ProductCategory> Categories = new List<ProductCategory>() { new ProductCategory() { Name="Фанера ФК", Path="fanera-fk" },
        new ProductCategory() { Name="Фанера ФСФ", Path="fanera-fsf" },
        new ProductCategory() { Name="ОСБ", Path="osb" },};

    public string Value1 { get; set; } = "";
    public string Value2 { get; set; } = "";

    private List<SelectedItem>? SortItems { get; set; } = new List<SelectedItem>();
    private List<SelectedItem>? TolItems { get; set; } = new List<SelectedItem>();

    private IEnumerable<Product>? Products { get; set; }

    public Catalog()
    {
        foreach (var item in Sorts)
        {
            SortItems.Add(new SelectedItem { Text = item, Value = item });
        }
        foreach (var item in Tolshiny)
        {
            TolItems.Add(new SelectedItem { Text = item.ToString() + " мм", Value = item.ToString() });
        }
        Products = Enumerable.Range(1, 100).Select(i => new Product()
        {
            
        });
    }

    private Task OnSelectedChanged(IEnumerable<SelectedItem> items, string value)
    {
        return Task.CompletedTask;
    }

    private Task<QueryData<Product>> OnQueryAsync(QueryPageOptions options)
    {
        var items = Products.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems);
        return Task.FromResult(new QueryData<Product>()
        {
            Items = items,
            TotalCount = Products.Count()
        });
    }
}