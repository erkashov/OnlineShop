@page "/auth"
@using System.Web;
@using Microsoft.AspNetCore.Http
@using OnlineShop.Models
@inject IHttpContextAccessor httpContextAccessor
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using BootstrapBlazor.Components

<PageTitle>Авторизация</PageTitle>
<AuthorizeView>
    <Authorized>
        <Redirect Url="/profile"></Redirect>
    </Authorized>
    <NotAuthorized>
        <div class="d-flex flex-column center-div gap-20">
            <h1>Авторизация</h1>
            <BootstrapInput Placeholder="Почта" @bind-Value="@Email" type='phone'/>
            <BootstrapInput Placeholder="Пароль" @bind-Value="@Password" type='password'/>
            <BootstrapBlazor.Components.Button OnClick=@AuthClick IsAsync="true">Войти</BootstrapBlazor.Components.Button>
            <BootstrapBlazor.Components.Button OnClick=@RegClick>Регистрация</BootstrapBlazor.Components.Button>
        </div>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    [Inject]
    private BootstrapBlazor.Components.SwalService swalService { get; set; }
    public string Email { get; set; }
    public string Password { get; set; }
    public User CurrentUser { get; set; }

    public Auth()
    {
        CurrentUser = new User();
    }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                if (user.Identity is not null && user.Identity.IsAuthenticated)
                {
                    CurrentUser = new User() { name = user.Identity.Name };
                }
            }
        }
        //if(await localStorage.ContainKeyAsync("CurrentUser"))
        //{
        //    CurrentUser = await localStorage.GetItemAsync<User>("CurrentUser");
        //}
    }
    private string encode(string param)
    {
        return HttpUtility.UrlEncode(param);
    }
    private async Task AuthClick()
    {
        if (!String.IsNullOrEmpty(Email) && !String.IsNullOrEmpty(Password))
        {
            var authResponce = await ShopLib.Auth.Login(Email, Password);
            if (authResponce.User != null)
            {

                NavigationManag.NavigateTo($"/login?paramUsername={encode(Email)}&paramPassword={encode(Password)}", true);

            }
            else
            {
                var op = new BootstrapBlazor.Components.SwalOption()
                    {
                        Category = BootstrapBlazor.Components.SwalCategory.Error,
                        Title = "Ошибка авторизации",
                        Content = authResponce.Error,
                        ShowClose = true,
                        CloseButtonText = "Закрыть"
                    };

                await swalService?.Show(op);
            }
        }
    }
    private async Task RegClick()
    {
        NavigationManag.NavigateTo($"/sign-up", true);
    }
}
