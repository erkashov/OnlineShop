@page "/catalog/{categoryName?}"

@using OnlineShop.Shared
@using OnlineShop.Data
@using BootstrapBlazor.Components
@using System.Collections.ObjectModel

@inject NavigationManager NavigationManager

<PageTitle>Каталог </PageTitle>

<h1>
    Каталог
</h1>

<div class="d-flex flex-row">
    <div class="d-flex flex-column filter-container">

        @foreach (Category category in Categories)
        {
            string href = "/catalog/" + category.path;
            if (category.path == CategoryName)
            {
                <NavLink href=@href class="catalog-selected-category catalog-category">@category.short_name</NavLink>
            }
            else
            {
                <NavLink href=@href class="catalog-category">@category.short_name</NavLink>
            }
        }

        @if (CategoryName != null && Categories.Where(p => p.path == CategoryName).FirstOrDefault() != null)
        {
            <h3>Фильтр</h3>
            <CheckboxList TValue="string" @bind-Value="@SortsFilter" Items="@SortItems" ShowLabel="true" DisplayText="Сорт" ShowBorder='false' IsVertical='true' OnSelectedChanged="@OnSelectedChanged" onclick=@GetProducts/>
            <CheckboxList TValue="string" @bind-Value="@ThicknessFilter" Items="@TolItems" ShowLabel="true" DisplayText="Толщина" ShowBorder='false' IsVertical='true' onclick=@GetProducts/>

        }
    </div>
    <div class="d-flex flex-column">
        @if (!String.IsNullOrWhiteSpace(Search))
        {
            <PageTitle>Поиск @Search</PageTitle>
            <h3>Поиск @Search</h3>
        }
        <ListView TItem="ShopLib.Product" Items="@Products">
            <BodyTemplate>
                <BootstrapBlazor.Components.Card>
                     <BodyTemplate>
                        <ProductCardComponent Id="@context.ID"></ProductCardComponent>
                     </BodyTemplate>
                </BootstrapBlazor.Components.Card>
            </BodyTemplate>
        </ListView>
    </div>
</div>



@code {
    [Parameter]
    public string? CategoryName { get; set; }


    public int myId { get; set; }

    public List<Category> Categories = new List<Category>();
    public CategoryFilter CategoryFilter { get; set; } = new CategoryFilter();
    public Category? SelectedCategory;

    [Parameter]
    [SupplyParameterFromQuery(Name = "SortsFilter")]
    public string SortsFilter { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "ThicknessFilter")]
    public string ThicknessFilter { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "Search")]
    public string Search { get; set; } = "";

    private List<SelectedItem>? SortItems { get; set; } = new List<SelectedItem>();
    private List<SelectedItem>? TolItems { get; set; } = new List<SelectedItem>();

    private ObservableCollection<ShopLib.Product>? Products { get; set; }

    public Catalog()
    {
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GetProducts();
    }

    protected override async Task OnParametersSetAsync()
    {
        Categories = await BaseHttpService<Category>.SendListAsync<Category>("Categories", HttpMethod.Get);
        if (CategoryName != null)
        {
            SelectedCategory = Categories.Where(p => p.path == CategoryName).FirstOrDefault();
            if (SelectedCategory == null) NavigationManager.NavigateTo("/catalog");
            else
            {
                CategoryFilter = (await BaseHttpService<CategoryFilter>.SendListAsync<CategoryFilter>
                    ("Categories/CategoryFilter?id=" + SelectedCategory.ID, HttpMethod.Get)).FirstOrDefault();
                SortItems = new List<SelectedItem>();
                TolItems = new List<SelectedItem>();
                if (CategoryFilter != null)
                {
                    if (CategoryFilter.ProductsSorts != null)
                    {
                        foreach (var item in CategoryFilter.ProductsSorts)
                        {
                            SortItems.Add(new SelectedItem { Text = item, Value = item });
                        }
                    }
                    if (CategoryFilter.ProductsThickness != null)
                    {
                        foreach (var item in CategoryFilter.ProductsThickness)
                        {
                            TolItems.Add(new SelectedItem { Text = item.ToString() + " мм", Value = item.ToString() });
                        }
                    }
                }
                await GetProducts();
            }
        }
        else
        {
            await GetProducts();
        }
    }

    private async Task<Task> OnSelectedChanged(IEnumerable<SelectedItem> items, string value)
    {
        //NavigationManager.NavigateTo("/catalog/" + SelectedCategory.path + "?SortsFilter=" + SortsFilter + "&ThicknessFilter=" + ThicknessFilter, true, true);
        await GetProducts();
        return Task.CompletedTask;
    }

    private async Task GetProducts()
    {
        //Products = new ObservableCollection<ShopLib.Product>();
        CategoryFilter filter = new CategoryFilter();
        filter.ProductsThickness = TolItems?.Where(p => p.Active == true).Select(p => Convert.ToDouble(p.Value)).ToList();
        filter.ProductsSorts = SortItems?.Where(p => p.Active == true).Select(p => p.Value).ToList();
        filter.CategoryId = SelectedCategory != null ? SelectedCategory.ID : 0;
        filter.Search = Search != null ? Search : "";
        Products = new ObservableCollection<ShopLib.Product>(await BaseHttpService<ShopLib.Product>.SendListAsync<ShopLib.Product>("Tovary/Filter", HttpMethod.Post, filter));
    }
}